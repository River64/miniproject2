# Luis Hernandez, River Johnson
# This code was partically generated by AI (OpenAI ChatGPT)

import networkx as nx
import random
import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures

def initialize(n, c):
    while True:
        g = nx.gnm_random_graph(n, c)
        if nx.is_connected(g):
            return g

def run_walk(graph):
    cnode = random.choice(list(graph.nodes))
    visited = set([cnode])
    steps = 0
    while len(visited) < graph.number_of_nodes():
        neighbors = list(graph.neighbors(cnode))
        cnode = random.choice(neighbors)
        visited.add(cnode)
        steps += 1
    return steps

def simulate_cover_time(n, c, trials=1000):
    cover_times = []
    for _ in range(trials):
        graph = initialize(n, c)
        steps = run_walk(graph)
        cover_times.append(steps)
    return np.mean(cover_times)

# === Sweep over N and C ===
data = []
N_range = [10, 15, 20, 25, 30]
for N in N_range:
    for C in range(N - 1, N*(N - 1)//2, (N * 2) // 5):  # from sparse to dense
        avg_time = simulate_cover_time(N, C, trials=10)
        data.append((N, C, avg_time))

# === Extract data ===
X = np.array([[n, c] for n, c, t in data])
y = np.array([t for n, c, t in data])

# === Polynomial regression model ===
poly = PolynomialFeatures(degree=2, include_bias=False)
X_poly = poly.fit_transform(X)
model = LinearRegression().fit(X_poly, y)
print("Estimated Cover Time Equation:")
coeffs = model.coef_
intercept = model.intercept_
terms = poly.get_feature_names_out(['N', 'C'])

for term, coef in zip(terms, coeffs):
    print(f"{coef:.4f} * {term}")
print(f"+ {intercept:.4f}")

# === Plot sample results ===
fig = plt.figure(figsize=(8,6))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(X[:,0], X[:,1], y, color='blue')
ax.set_xlabel("N (nodes)")
ax.set_ylabel("C (edges)")
ax.set_zlabel("Avg Cover Time")
plt.title("Empirical Cover Time Surface")
# limiting z axis for better view
ax.set_zlim(0, 100)
plt.show()
