# Luis Hernandez, River Johnson
# This code was partially generated by AI (OpenAI ChatGPT)

from pylab import *
import networkx as nx
import random

def initialize(n, c):
    global graph, cnode, walk_result
    # Generate random graph with N nodes and C edges
    attempting = True
    while attempting:
        graph = nx.gnm_random_graph(n, c)
        if nx.is_connected(graph):
            attempting = False
    
    # Set the starting node- "first" is random, because the graph is randomly generated
    cnode = list(graph.nodes)[0]
    # Add the starting node to the time series
    walk_result = [cnode]

def observe():
    # Add the new current node to the result
    global walk_result, cnode
    walk_result.append(cnode)

def update():
    global cnode, graph, walk_result
    neighbors = list(graph.neighbors(cnode))
    
    # Find neighbors that have not been visited yet
    unvisited_neighbors = [n for n in neighbors if n not in walk_result]
    
    if unvisited_neighbors:
        # Prioritize unvisited neighbors
        cnode = random.choice(unvisited_neighbors)
    else:
        # Fallback to any neighbor if all are visited
        cnode = random.choice(neighbors)


# Returns true if all nodes in the graph have been visited by the walker
# Checked during simulation
def all_visited():
    global graph, walk_result
    result = len(set(walk_result)) == graph.number_of_nodes()
    # So that the simulation doesn't run forever:
    if (walk_result.__len__() > 100):
        result = True
    return result

time_for_average = []
# Simulate this walking 1000 times
for i in range(1000):
    initialize(10, 50)
    if(nx.is_connected(graph)):
        while(not all_visited()):
            update()
            observe()
        #print(walk_result, end = "\n\n")
        time_for_average.append(walk_result.__len__())
# Calculate and print average walking time:
average_time = sum(time_for_average) / len(time_for_average)
#print("Average walking time:", average_time)

# === Plotting the results ===
import matplotlib.pyplot as plt

plt.figure(figsize=(8, 5))
plt.hist(time_for_average, bins=15, color='skyblue', edgecolor='black')
plt.axvline(average_time, color='red', linestyle='--', label=f'Avg = {average_time:.2f}')
plt.title("Distribution of Cover Times (Greedy Random Walk)")
plt.xlabel("Cover Time (Steps to visit all nodes)")
plt.ylabel("Frequency")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()